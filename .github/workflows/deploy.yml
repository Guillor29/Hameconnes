name: Deploy to Production

# This is an optimized workflow that builds and deploys the application
# with caching and incremental uploads for faster deployments
#
# BUILD PROCESS:
# 1. Composer dependencies are installed using Docker (only if cache miss)
# 2. NPM dependencies are installed using Docker (only if cache miss)
# 3. Assets are ALWAYS built using Docker (regardless of cache status)
# 4. The build directory is verified to exist before deployment
# 5. The build directory is explicitly included in the FTP upload
#
# IMPORTANT NOTES:
# - The build directory (public/build) must exist and contain the Vite manifest
# - The FTP deployment uses incremental uploads, but explicitly includes the build directory
# - The deploy.php script has fallback mechanisms to create the build directory if needed
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed for changed files detection

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35

      - name: Cache Composer dependencies
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Cache NPM dependencies
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      # Login to Docker Hub using secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Generate vendor directory using Docker (only if cache miss)
      - name: Generate vendor directory
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          docker run --rm \
            -v $(pwd):/app \
            -w /app \
            composer:latest \
            composer install --no-dev --optimize-autoloader

      # Generate node_modules using Docker (only if cache miss)
      # This step installs NPM dependencies but doesn't build assets
      - name: Generate node_modules
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          docker run --rm \
            -v $(pwd):/app \
            -w /app \
            node:20-alpine \
            npm install

      # Always build assets using Docker (regardless of cache status)
      # This step ensures that assets are built even if the cache was hit
      # It creates the public/build directory and the Vite manifest
      - name: Build assets
        run: |
          echo "Building assets with Vite..."
          docker run --rm \
            -v $(pwd):/app \
            -w /app \
            node:20-alpine \
            npm run build
          echo "Assets built successfully"

      # Verify build directory exists
      # This step checks if the build directory exists and creates it if needed
      # It also lists the contents of the build directory for debugging
      - name: Verify build directory
        run: |
          if [ -d "public/build" ]; then
            echo "✅ Build directory exists"
            echo "Contents of public/build:"
            ls -la public/build

            if [ -f "public/build/manifest.json" ]; then
              echo "✅ Vite manifest exists"
              cat public/build/manifest.json
            else
              echo "❌ Vite manifest does not exist"
              echo "This may cause issues in production"
            fi
          else
            echo "❌ Build directory does not exist"
            mkdir -p public/build
            echo "Created build directory"
          fi

      # Generate the production .env file with all necessary configurations
      - name: Generate .env file
        run: |
          echo "APP_NAME=\"Les Hameçonnés\"" > .env
          echo "APP_ENV=production" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY || 'base64:VJ/YnYBfm7x/PX9vZTuR/mkyEsmgyAhvR/tGtTtYL34=' }}" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "APP_URL=https://hameconnes.guillaume-rv.fr" >> .env

          echo "APP_LOCALE=fr" >> .env
          echo "APP_FALLBACK_LOCALE=en" >> .env
          echo "APP_FAKER_LOCALE=fr_FR" >> .env

          echo "LOG_CHANNEL=stack" >> .env
          echo "LOG_LEVEL=error" >> .env

          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=\"${{ secrets.DB_PASS }}\"" >> .env
          echo "DB_CHARSET=${{ secrets.DB_CHARSET }}" >> .env

          echo "SESSION_DRIVER=database" >> .env
          echo "SESSION_LIFETIME=120" >> .env
          echo "SESSION_ENCRYPT=true" >> .env

          echo "BROADCAST_CONNECTION=log" >> .env
          echo "FILESYSTEM_DISK=local" >> .env
          echo "QUEUE_CONNECTION=database" >> .env

          echo "CACHE_STORE=database" >> .env

          echo "MAIL_MAILER=smtp" >> .env
          echo "MAIL_HOST=smtp.mailtrap.io" >> .env
          echo "MAIL_PORT=2525" >> .env
          echo "MAIL_USERNAME=null" >> .env
          echo "MAIL_PASSWORD=null" >> .env
          echo "MAIL_FROM_ADDRESS=noreply@hameconnes.guillaume-rv.fr" >> .env
          echo "MAIL_FROM_NAME=\"Les Hameçonnés\"" >> .env

          echo "VITE_APP_NAME=\"Les Hameçonnés\"" >> .env
          echo "VITE_MAPBOX_TOKEN=\"pk.eyJ1IjoiZ3VpbGxvciIsImEiOiJjazI0d25kZncyNnU5M2NtdmphaDR0bHcwIn0.XyxG_qYLs_RrQOwkFFomQg\"" >> .env

      # Create deployment manifest for tracking changes
      - name: Create deployment manifest
        run: |
          echo "Last deployment: $(date)" > deployment-manifest.txt
          echo "Commit: ${{ github.sha }}" >> deployment-manifest.txt
          echo "Changed files:" >> deployment-manifest.txt
          echo "${{ steps.changed-files.outputs.all_changed_files }}" >> deployment-manifest.txt

      # Note: We're no longer creating a simplified deploy.php script
      # The enhanced deploy.php script with Vite manifest handling will be used instead
      - name: Add note about deploy.php
        run: |
          echo "Using the enhanced deploy.php script that includes Vite manifest handling"
          echo "This script will be preserved during deployment and not overwritten"

      # Deploy to O2switch via FTP with incremental uploads
      # This step uploads the files to the server using FTP
      # It uses incremental uploads (only changed files) for efficiency
      # But explicitly includes the build directory to ensure it's always uploaded
      - name: Deploy to O2switch via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          local-dir: ./
          server-dir: /
          dangerous-clean-slate: false  # Enable incremental uploads (only changed files)
          exclude: |
            # Exclude unnecessary files and directories
            **/.git*
            **/.git*/**
            **/tests/**
            **/.env.*
            !**/.env
          include: |
            # Always include these directories/files even with incremental uploads
            public/build/**  # Always include the build directory and its contents
            # This ensures the Vite manifest and assets are always uploaded

      # Final step: Notify about deployment completion
      - name: Deployment completion message
        run: |
          echo "Deployment files have been uploaded to the server."
          echo "The deployment is using incremental uploads, so only changed files were transferred."
          echo "However, the build directory (public/build) is always included in the upload."
          echo "Composer and NPM dependencies were cached for faster future deployments."
          echo "Assets were built using Vite and the manifest file should be available in public/build/manifest.json."
          echo "To complete the deployment, visit https://hameconnes.guillaume-rv.fr/public/deploy.php in your browser."
          echo "This will execute the final deployment steps (running Laravel commands and verifying the Vite manifest)."
          echo "If you encounter 'Vite manifest not found' errors, check the deploy.php output for details."
