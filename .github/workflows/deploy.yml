name: Deploy to Production

# This is an optimized workflow that builds and deploys the application
# with caching and incremental uploads for faster deployments
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed for changed files detection

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35

      - name: Cache Composer dependencies
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Cache NPM dependencies
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      # Login to Docker Hub using secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Generate vendor directory using Docker (only if cache miss)
      - name: Generate vendor directory
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          docker run --rm \
            -v $(pwd):/app \
            -w /app \
            composer:latest \
            composer install --no-dev --optimize-autoloader

      # Generate node_modules and build assets using Docker (only if cache miss)
      - name: Generate node_modules and build assets
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          docker run --rm \
            -v $(pwd):/app \
            -w /app \
            node:20-alpine \
            sh -c "npm install && npm run build"

      # Generate the production .env file with all necessary configurations
      - name: Generate .env file
        run: |
          echo "APP_NAME=\"Les Hameçonnés\"" > .env
          echo "APP_ENV=production" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY || 'base64:VJ/YnYBfm7x/PX9vZTuR/mkyEsmgyAhvR/tGtTtYL34=' }}" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "APP_URL=https://hameconnes.guillaume-rv.fr" >> .env

          echo "APP_LOCALE=fr" >> .env
          echo "APP_FALLBACK_LOCALE=en" >> .env
          echo "APP_FAKER_LOCALE=fr_FR" >> .env

          echo "LOG_CHANNEL=stack" >> .env
          echo "LOG_LEVEL=error" >> .env

          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=\"${{ secrets.DB_PASS }}\"" >> .env
          echo "DB_CHARSET=${{ secrets.DB_CHARSET }}" >> .env

          echo "SESSION_DRIVER=database" >> .env
          echo "SESSION_LIFETIME=120" >> .env
          echo "SESSION_ENCRYPT=true" >> .env

          echo "BROADCAST_CONNECTION=log" >> .env
          echo "FILESYSTEM_DISK=local" >> .env
          echo "QUEUE_CONNECTION=database" >> .env

          echo "CACHE_STORE=database" >> .env

          echo "MAIL_MAILER=smtp" >> .env
          echo "MAIL_HOST=smtp.mailtrap.io" >> .env
          echo "MAIL_PORT=2525" >> .env
          echo "MAIL_USERNAME=null" >> .env
          echo "MAIL_PASSWORD=null" >> .env
          echo "MAIL_FROM_ADDRESS=noreply@hameconnes.guillaume-rv.fr" >> .env
          echo "MAIL_FROM_NAME=\"Les Hameçonnés\"" >> .env

          echo "VITE_APP_NAME=\"Les Hameçonnés\"" >> .env
          echo "VITE_MAPBOX_TOKEN=\"pk.eyJ1IjoiZ3VpbGxvciIsImEiOiJjazI0d25kZncyNnU5M2NtdmphaDR0bHcwIn0.XyxG_qYLs_RrQOwkFFomQg\"" >> .env

      # Create deployment manifest for tracking changes
      - name: Create deployment manifest
        run: |
          echo "Last deployment: $(date)" > deployment-manifest.txt
          echo "Commit: ${{ github.sha }}" >> deployment-manifest.txt
          echo "Changed files:" >> deployment-manifest.txt
          echo "${{ steps.changed-files.outputs.all_changed_files }}" >> deployment-manifest.txt

      # Create a PHP deployment script that can be executed via web browser
      - name: Create PHP deployment script
        run: |
          cat > public/deploy.php << 'EOF'
          <?php
          /**
           * Simple deployment script for Les Hameçonnés
           * This script can be executed via web browser after the FTP upload is complete
           */

          // Set error reporting for debugging
          error_reporting(E_ALL);
          ini_set('display_errors', 1);

          // Start output buffering
          ob_start();

          echo "Starting deployment process...\n";

          // Define the base path
          $basePath = dirname(__DIR__);

          // Check for .env file
          $envPath = $basePath . '/.env';
          if (!file_exists($envPath)) {
              echo "Error: .env file not found\n";
              exit(1);
          }

          // Run artisan commands
          $phpBinary = PHP_BINARY;
          $artisanPath = $basePath . '/artisan';

          // Function to run a command and log the output
          function runCommand($command, $workingDir = null) {
              echo "Running: $command\n";

              $output = [];
              $returnCode = 0;

              // Change directory if specified
              if ($workingDir) {
                  $currentDir = getcwd();
                  chdir($workingDir);
              }

              // Execute the command
              exec($command . " 2>&1", $output, $returnCode);

              // Change back to original directory if needed
              if ($workingDir) {
                  chdir($currentDir);
              }

              echo "Output:\n" . implode("\n", $output) . "\n";
              echo "Return code: $returnCode\n\n";

              return [
                  'output' => $output,
                  'code' => $returnCode
              ];
          }

          // Run Laravel commands
          runCommand("$phpBinary $artisanPath config:cache", $basePath);
          runCommand("$phpBinary $artisanPath route:cache", $basePath);
          runCommand("$phpBinary $artisanPath view:cache", $basePath);
          runCommand("$phpBinary $artisanPath migrate --force", $basePath);

          echo "Deployment process completed!";

          // Get the output buffer contents
          $output = ob_get_clean();

          // Create a log file with the output
          $logFile = $basePath . '/storage/logs/deployment-' . date('Y-m-d-H-i-s') . '.log';
          file_put_contents($logFile, $output);

          // Display the output
          echo "<pre>$output</pre>";
          EOF

      # Deploy to O2switch via FTP with incremental uploads
      - name: Deploy to O2switch via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          local-dir: ./
          server-dir: /
          dangerous-clean-slate: false  # Enable incremental uploads
          exclude: |
            **/.git*
            **/.git*/**
            **/tests/**
            **/.env.*
            !**/.env

      # Final step: Notify about deployment completion
      - name: Deployment completion message
        run: |
          echo "Deployment files have been uploaded to the server."
          echo "The deployment is using incremental uploads, so only changed files were transferred."
          echo "Composer and NPM dependencies were cached for faster future deployments."
          echo "To complete the deployment, visit https://hameconnes.guillaume-rv.fr/public/deploy.php in your browser."
          echo "This will execute the final deployment steps (running Laravel commands)."
